[{"C:\\Users\\99559\\Desktop\\Fcc projects\\fcc calculator\\my-app\\src\\index.js":"1","C:\\Users\\99559\\Desktop\\Fcc projects\\fcc calculator\\my-app\\src\\App.js":"2"},{"size":434,"mtime":1606996166269,"results":"3","hashOfConfig":"4"},{"size":3282,"mtime":1608122215880,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"h6623e",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\99559\\Desktop\\Fcc projects\\fcc calculator\\my-app\\src\\index.js",[],["12","13"],"C:\\Users\\99559\\Desktop\\Fcc projects\\fcc calculator\\my-app\\src\\App.js",["14"],"import React from \"react\";\nimport \"./App.css\";\n\nconst numbers = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\nconst operations = [\"/\", \"*\", \"-\", \"+\"];\nconst ids = {\n  7: \"seven\",\n  8: \"eight\",\n  9: \"nine\",\n  4: \"four\",\n  5: \"five\",\n  6: \"six\",\n  1: \"one\",\n  2: \"two\",\n  3: \"three\",\n  0: \"zero\",\n  \"/\": \"divide\",\n  \"*\": \"multiply\",\n  \"-\": \"subtract\",\n  \"+\": \"add\",\n};\n\nclass App extends React.Component {\n  state = {\n    lastPressed: undefined,\n    calc: \"0\",\n    operation: undefined,\n  };\n\n  handleClick = (e) => {\n    const { calc, lastPressed } = this.state;\n    const { innerText } = e.target;\n\n    switch (innerText) {\n      case \"AC\": {\n        this.setState({\n          calc: \"0\",\n        });\n        break;\n      }\n\n      case \"=\": {\n        const evaluated = eval(calc);\n        this.setState({\n          calc: evaluated,\n        });\n        break;\n      }\n\n      case \".\": {\n        const splitted = calc.split(/[+\\-*/]/);\n        const last = splitted.slice(-1)[0];\n\n        if (!last.includes(\".\")) {\n          this.setState({\n            calc: calc + \".\",\n          });\n        }\n\n        break;\n      }\n\n      default: {\n        let e = undefined;\n        if (operations.includes(innerText)) {\n          if (operations.includes(lastPressed) && innerText !== \"-\") {\n            const lastNumberIdx = calc\n              .split(\"\")\n              .reverse()\n              .findIndex((char) => char !== \" \" && numbers.includes(+char));\n            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\n          } else {\n            e = `${calc} ${innerText} `;\n          }\n        } else {\n          e = calc === \"0\" ? innerText : calc + innerText;\n        }\n\n        this.setState({\n          calc: e,\n        });\n      }\n    }\n\n    this.setState({\n      lastPressed: innerText,\n    });\n  };\n\n  render() {\n    const { calc } = this.state;\n\n    return (\n      <div className=\"calculator\">\n        <div id=\"display\" className=\"display\">\n          {calc}\n        </div>\n\n        <div className=\"numbers-container\">\n          <button\n            className=\"bigger-h grey ac\"\n            onClick={this.handleClick}\n            id=\"clear\"\n          >\n            AC\n          </button>\n          {/* <button\n            className=\"cyan divide\"\n            onClick={this.handleClick}\n            id=\"divide\"\n          >\n            /\n          </button> */}\n\n          {numbers.map((num) => (\n            <button\n              className={`grey ${num === 0 && \"big-h\"}`}\n              key={num}\n              onClick={this.handleClick}\n              id={ids[num]}\n            >\n              {num}\n            </button>\n          ))}\n\n          <button className=\"grey\" onClick={this.handleClick} id=\"decimal\">\n            .\n          </button>\n        </div>\n        <div className=\"operations-container\">\n          {operations.map((op) => (\n            <button\n              className=\"cyan\"\n              key={op}\n              onClick={this.handleClick}\n              id={ids[op]}\n            >\n              {op}\n            </button>\n          ))}\n\n          <button\n            className=\"cyan equals\"\n            onClick={this.handleClick}\n            id=\"equals\"\n          >\n            =\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":43,"column":27,"nodeType":"21","messageId":"22","endLine":43,"endColumn":31},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]